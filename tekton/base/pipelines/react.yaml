apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: react-build
spec:
  params:
    - description: Name of App that will be deployed.
      name: appName
      type: string
    - description: The git repository URL to clone from.
      name: repoUrl
      type: string
    - description: The git branch to clone.
      name: branchName
      type: string
    - description: Path to the file that contains the application
      name: pathToContext
      type: string
    - description: A tag to differentiate versions of images
      name: imageTag
      type: string
      default: latest
    - description: Whether or not runDeploy will run. Will run if set to 'true'
      name: runDeploy
      type: string
      default: false
  tasks:
    - name: fetch-repo
      params:
        - name: url
          value: $(params.repoUrl)
        - name: revision
          value: $(params.branchName)
      taskRef:
        kind: Task
        name: t-git-clone
      workspaces:
        - name: output
          workspace: shared-data
          
    - name: react-workspace
      params:
        - name: CONTEXT_DIR
          value: $(params.pathToContext)
      runAfter:
        - fetch-repo
      taskRef:
        kind: Task
        name: t-react-workspace
      workspaces:
        - name: source
          workspace: shared-data

    - name: react-build
      params:
        - name: CONTEXT_DIR
          value: .
        - name: TLSVERIFY
          value: 'false'
        - name: IMAGE
          value: >-
            image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(params.appName):$(params.imageTag)
      runAfter:
        - react-workspace
      taskRef:
        resolver: cluster
        params:
        - name: kind
          value: task
        - name: name
          value: s2i-nodejs
        - name: namespace
          value: openshift-pipelines
      workspaces:
        - name: source
          workspace: shared-data
          
    - name: react-deploy
      when:
        - input: "$(params.runDeploy)"
          operator: in
          values: ["true"]
      params:
        - name: APP_NAME
          value: $(params.appName)
        - name: TAG
          value: $(params.imageTag)
        - name: NAMESPACE
          value: $(context.pipelineRun.namespace)
      runAfter:
        - react-build
      taskRef:
        kind: Task
        name: t-react-deploy
    
    - name: react-update
      when:
        - input: "$(params.runDeploy)"
          operator: notin
          values: ["true"]
      params:
        - name: APP_NAME
          value: $(params.appName)
        - name: TAG
          value: $(params.imageTag)
        - name: NAMESPACE
          value: $(context.pipelineRun.namespace)
      runAfter:
        - react-build
      taskRef:
        kind: Task
        name: t-react-update

  workspaces:
    - description: |
        This workspace will receive the cloned git repo and be passed
        to the next Task for the repo's README.md file to be read.
      name: shared-data

    